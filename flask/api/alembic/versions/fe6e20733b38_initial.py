"""initial

Revision ID: fe6e20733b38
Revises:
Create Date: 2024-10-16 18:26:15.843927

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = "fe6e20733b38"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "budgets",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_budgets_id"), "budgets", ["id"], unique=False)
    op.create_table(
        "dissemination_areas",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("DAUID", sa.Integer(), nullable=False),
        sa.Column("PRUID", sa.Integer(), nullable=True),
        sa.Column("PRNAME", sa.String(), nullable=True),
        sa.Column("CDUID", sa.Integer(), nullable=True),
        sa.Column("CDNAME", sa.String(), nullable=True),
        sa.Column("CDTYPE", sa.String(), nullable=True),
        sa.Column("CCSUID", sa.Integer(), nullable=True),
        sa.Column("CCSNAME", sa.String(), nullable=True),
        sa.Column("CSDUID", sa.Integer(), nullable=True),
        sa.Column("CSDNAME", sa.String(), nullable=True),
        sa.Column("CSDTYPE", sa.String(), nullable=True),
        sa.Column("ERUID", sa.Integer(), nullable=True),
        sa.Column("ERNAME", sa.String(), nullable=True),
        sa.Column("SACCODE", sa.Integer(), nullable=True),
        sa.Column("SACTYPE", sa.String(), nullable=True),
        sa.Column("CMAUID", sa.Integer(), nullable=True),
        sa.Column("CMAPUID", sa.Integer(), nullable=True),
        sa.Column("CMANAME", sa.String(), nullable=True),
        sa.Column("CMATYPE", sa.String(), nullable=True),
        sa.Column("CTUID", sa.Float(), nullable=True),
        sa.Column("CTNAME", sa.Float(), nullable=True),
        sa.Column("ADAUID", sa.Integer(), nullable=True),
        sa.Column("DAUID_int", sa.Integer(), nullable=True),
        sa.Column("Shape_Leng", sa.Float(), nullable=True),
        sa.Column("Shape_Area", sa.Float(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("DAUID"),
    )

    op.create_index(
        op.f("ix_dissemination_areas_id"), "dissemination_areas", ["id"], unique=False
    )
    op.create_table(
        "existing_lanes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("_id", sa.Integer(), nullable=True),
        sa.Column("OBJECTID", sa.Integer(), nullable=True),
        sa.Column("SEGMENT_ID", sa.Integer(), nullable=True),
        sa.Column("INSTALLED", sa.Integer(), nullable=True),
        sa.Column("UPGRADED", sa.Integer(), nullable=True),
        sa.Column("PRE_AMALGAMATION", sa.String(), nullable=True),
        sa.Column("STREET_NAME", sa.String(), nullable=True),
        sa.Column("FROM_STREET", sa.String(), nullable=True),
        sa.Column("TO_STREET", sa.String(), nullable=True),
        sa.Column("ROADCLASS", sa.String(), nullable=True),
        sa.Column("CNPCLASS", sa.String(), nullable=True),
        sa.Column("SURFACE", sa.String(), nullable=True),
        sa.Column("OWNER", sa.String(), nullable=True),
        sa.Column("DIR_LOWORDER", sa.String(), nullable=True),
        sa.Column("INFRA_LOWORDER", sa.String(), nullable=True),
        sa.Column("SEPA_LOWORDER", sa.String(), nullable=True),
        sa.Column("SEPB_LOWORDER", sa.String(), nullable=True),
        sa.Column("ORIG_LOWORDER_INFRA", sa.String(), nullable=True),
        sa.Column("DIR_HIGHORDER", sa.String(), nullable=True),
        sa.Column("INFRA_HIGHORDER", sa.String(), nullable=True),
        sa.Column("SEPA_HIGHORDER", sa.String(), nullable=True),
        sa.Column("SEPB_HIGHORDER", sa.String(), nullable=True),
        sa.Column("ORIG_HIGHORDER", sa.String(), nullable=True),
        sa.Column("BYLAWED", sa.String(), nullable=True),
        sa.Column("EDITOR", sa.String(), nullable=True),
        sa.Column("LAST_EDIT_DATE", sa.String(), nullable=True),
        sa.Column("UPGRADE_DESCRIPTION", sa.String(), nullable=True),
        sa.Column("CONVERTED", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="MULTILINESTRING",
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("total_length", sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_index(
        op.f("ix_existing_lanes_id"), "existing_lanes", ["id"], unique=False
    )
    op.create_table(
        "metrics",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_metrics_id"), "metrics", ["id"], unique=False)
    op.create_table(
        "projects",
        sa.Column("id", sa.Integer(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_projects_id"), "projects", ["id"], unique=False)
    op.create_table(
        "arterials",
        sa.Column("import_idx", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("ADDRESS_L", sa.String(), nullable=True),
        sa.Column("ADDRESS_R", sa.String(), nullable=True),
        sa.Column("CP_TYPE", sa.String(), nullable=True),
        sa.Column("DIR_CODE_D", sa.String(), nullable=True),
        sa.Column("FCODE", sa.Integer(), nullable=True),
        sa.Column("FCODE_DESC", sa.String(), nullable=True),
        sa.Column("FNODE", sa.Integer(), nullable=True),
        sa.Column("GEO_ID", sa.Integer(), nullable=False),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="LINESTRING",
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("HINUML", sa.Integer(), nullable=True),
        sa.Column("HINUMR", sa.Integer(), nullable=True),
        sa.Column("JURIS_CODE", sa.String(), nullable=True),
        sa.Column("length_in_", sa.Float(), nullable=True),
        sa.Column("LFN_ID", sa.Integer(), nullable=True),
        sa.Column("LF_NAME", sa.String(), nullable=True),
        sa.Column("LONUMR", sa.Integer(), nullable=True),
        sa.Column("LONUML", sa.Integer(), nullable=True),
        sa.Column("NBRLANES_2", sa.Integer(), nullable=True),
        sa.Column("OBJECTID", sa.Float(), nullable=True),
        sa.Column("OE_FLAG_L", sa.String(), nullable=True),
        sa.Column("OE_FLAG_R", sa.String(), nullable=True),
        sa.Column("ONE_WAY_DI", sa.Integer(), nullable=True),
        sa.Column("Shape_Leng", sa.Float(), nullable=True),
        sa.Column("SPEED", sa.Integer(), nullable=True),
        sa.Column("TNODE", sa.Integer(), nullable=True),
        sa.Column("U500_20", sa.String(), nullable=True),
        sa.Column("total_length", sa.Float(), nullable=False),
        sa.Column("default_project_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["default_project_id"],
            ["projects.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_index(op.f("ix_arterials_id"), "arterials", ["id"], unique=False)
    op.create_table(
        "budget_scores",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("metric_id", sa.Integer(), nullable=False),
        sa.Column("budget_id", sa.Integer(), nullable=True),
        sa.Column("dissemination_area_id", sa.Integer(), nullable=False),
        sa.Column("score", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["budget_id"],
            ["budgets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["dissemination_area_id"],
            ["dissemination_areas.id"],
        ),
        sa.ForeignKeyConstraint(
            ["metric_id"],
            ["metrics.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("dissemination_area_id", "metric_id", "budget_id"),
    )
    op.create_table(
        "budget_project_members",
        sa.Column("arterial_id", sa.Integer(), nullable=False),
        sa.Column("budget_id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["arterial_id"],
            ["arterials.id"],
        ),
        sa.ForeignKeyConstraint(
            ["budget_id"],
            ["budgets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.PrimaryKeyConstraint("arterial_id", "budget_id", "project_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("budget_project_members")
    op.drop_table("budget_scores")
    op.drop_index(op.f("ix_arterials_id"), table_name="arterials")

    op.drop_table("arterials")
    op.drop_index(op.f("ix_projects_id"), table_name="projects")
    op.drop_table("projects")
    op.drop_index(op.f("ix_metrics_id"), table_name="metrics")
    op.drop_table("metrics")
    op.drop_index(op.f("ix_existing_lanes_id"), table_name="existing_lanes")

    op.drop_table("existing_lanes")
    op.drop_index(op.f("ix_dissemination_areas_id"), table_name="dissemination_areas")

    op.drop_table("dissemination_areas")
    op.drop_index(op.f("ix_budgets_id"), table_name="budgets")
    op.drop_table("budgets")
    # ### end Alembic commands ###
